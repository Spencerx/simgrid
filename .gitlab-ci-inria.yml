# gitlab-ci-local --file .gitlab-ci-inria.yml  <job>

coverage:
  image: debian:testing
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  tags:
    - large  # Inria infra
  script:
  - apt-get --allow-releaseinfo-change update
  - apt install -y python3-coverage gcovr build-essential ninja-build cmake libboost-dev libgraphviz-dev nlohmann-json3-dev default-jdk-headless  python3-dev pybind11-dev python3-all libns3-dev
  - mkdir build ; cd build
  - cmake -GNinja  -Denable_python=ON -Denable_ns3=ON -Denable_java=ON  -Denable_documentation=OFF -Denable_testsuite_smpi_MPICH3=ON -Denable_testsuite_McMini=ON -Denable_compile_optimizations=OFF -Denable_compile_warnings=ON -DLTO_EXTRA_FLAG="auto" 
      -Denable_memcheck=OFF -Denable_memcheck_xml=OFF -Denable_coverage=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
  - ninja --verbose all tests
  - export PYTHON_TOOL_OPTIONS="/usr/bin/python3-coverage run --parallel-mode --branch"
  - ctest --no-compress-output -D ExperimentalTest --output-junit ../result.xml -j$(nproc) --output-on-failure || true
  - ctest -D ExperimentalCoverage || true
  # convert python coverage reports in xml ones
  - find .. -size +1c -name ".coverage*" -exec mv {} . \;
  - /usr/bin/python3-coverage combine
  - /usr/bin/python3-coverage xml --ignore-errors -o ../python_coverage.xml
  # convert all gcov reports to xml cobertura reports
  - gcovr --root .. --xml-pretty -e ../teshsuite -e MBI -e ../examples/smpi/NAS -e ../examples/smpi/mc -u -o ../xml_coverage.xml  --gcov-ignore-parse-errors all --gcov-ignore-errors all
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  artifacts:
    expire_in: 6 months
    paths:
    -  ./*_coverage.xml
    - result.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        # Captures several files
        path: ./*_coverage.xml
      junit: result.xml

# ###################################################################################################
# ###################################################################################################
# ###################################################################################################

stages:
 - docker
 - smoke_test
 - test
# Smoke tests are fast jobs. If they fail, no need to run the other tests 

variables:
  DOCKER_DRIVER: overlay2

docker_build:
  image: docker:latest
  stage: docker
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  tags:
    - small  # Inria infra
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull -t $CI_REGISTRY_IMAGE/build-deps:latest || true
    - docker build -f tools/docker/Dockerfile.build-deps -t $CI_REGISTRY_IMAGE/build-deps:latest .
    - docker push $CI_REGISTRY_IMAGE/build-deps:latest

.cached-build:
  cache:
    key: ccache-$CI_JOB_NAME
    paths:
      - ccache
    when: 'always'
  # Use ccache transparently, and print stats before/after
  before_script:
    - export PATH="/usr/lib/ccache:$PATH"
    - export CCACHE_BASEDIR="$PWD"
    - export CCACHE_DIR="$PWD/ccache"
    - export CCACHE_COMPILERCHECK=content
    - ccache --zero-stats || true
    - ccache --show-stats || true
  after_script:
    - export CCACHE_DIR="$PWD/ccache"
    - ccache --show-stats

# Fast job with a docker image preinstalled and a ccache setup, to fail fast on trivial errors
build-base:
  extends: .cached-build
  stage: smoke_test
  image: $CI_REGISTRY_IMAGE/build-deps:latest
  # interruptible means "Abort the pipeline if another commit comes when we're in this job"
  interruptible: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
  tags:
    - large  # Inria infra
  script:
  - rm -rf CMakeFiles CMakeCache.txt
  - cmake -GNinja -Denable_python=ON -Denable_java=ON -Denable_documentation=OFF -Denable_testsuite_smpi_MPICH3=ON -Denable_testsuite_McMini=ON -Denable_compile_warnings=ON -DLTO_EXTRA_FLAG="auto" .
  - ninja --verbose all tests
  - ctest -T Test --output-junit result.xml -j$(nproc) --output-on-failure
  artifacts:
    when: always
    expire_in: 6 months
    reports:
      junit: result.xml


# Ensure that the produced tarball is OK
distcheck:
  stage: smoke_test
  image: $CI_REGISTRY_IMAGE/build-deps:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
  tags:
    - linux  # any runner will do
  script:
  - cmake .
  - make distcheck-configure

# Test the Python build
build-pip:
  stage: test
  image: $CI_REGISTRY_IMAGE/build-deps:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
  tags: # Select a runner
    - medium # Inria infra
  script:
  - apt-get --allow-releaseinfo-change update
  - apt install -y python3-pip cmake libboost-dev g++ gcc pybind11-dev python3-build python3.11-venv
  - python3 -m build --outdir dist
  artifacts:
    paths:
    - dist/
    expire_in: 2 weeks

# ###################################################################################################
# ###################################################################################################
# ###################################################################################################

alpine-release:
  image: alpine:latest
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
  tags:
    - large  # Inria infra
  script: 
  - apk add --no-cache build-base git cmake python3 py3-pybind11-dev graphviz-dev eigen-dev boost-dev openjdk21-jdk valgrind-dev nlohmann-json fortify-headers
  - export JAVA_HOME=/usr/lib/jvm/default-jvm
  - cmake -Denable_python=ON -Denable_java=ON -Denable_documentation=OFF -Denable_compile_optimizations=ON -Denable_testsuite_smpi_MPICH3=ON -Denable_testsuite_McMini=ON -Denable_compile_warnings=ON -DLTO_EXTRA_FLAG="auto" .
  - make VERBOSE=1 -j$(nproc) all tests
  - ctest -T Test --output-junit result.xml -j$(nproc) --output-on-failure
  artifacts:
    when: always
    expire_in: 6 months
    reports:
      junit: result.xml

debian-clang:
  image: debian:testing
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
  tags:
    - large  # Inria infra
  script:
  - apt-get --allow-releaseinfo-change update
  - apt install -y build-essential ninja-build clang libgcc-14-dev cmake libboost-dev libgraphviz-dev nlohmann-json3-dev default-jdk-headless  python3-dev pybind11-dev python3-all libns3-dev
  - rm -rf CMakeFiles CMakeCache.txt
  - cmake -GNinja -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang  -Denable_python=ON -Denable_java=ON -Denable_documentation=OFF -Denable_testsuite_smpi_MPICH3=ON -Denable_testsuite_McMini=ON -Denable_compile_warnings=ON -DLTO_EXTRA_FLAG="auto" .
  - ninja --verbose all tests
  - ctest -T Test --output-junit result.xml -j$(nproc) --output-on-failure
  artifacts:
    when: always
    expire_in: 6 months
    reports:
      junit: result.xml

fedora-rawhide-release:
  image: fedora:rawhide
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
  tags:
    - large  # Inria infra
  script:
  - dnf install -y @development-tools ninja-build cmake g++ git cmake python3-devel pybind11-devel graphviz-devel eigen3-devel boost-devel java-latest-openjdk-devel valgrind-devel json-devel
  - rm -rf CMakeFiles CMakeCache.txt
  - cmake -GNinja -Denable_python=ON -Denable_java=ON -Denable_documentation=OFF -Denable_testsuite_smpi_MPICH3=ON -Denable_testsuite_McMini=ON -Denable_compile_warnings=ON -DLTO_EXTRA_FLAG="auto" .
  - ninja --verbose all tests
  - ctest -T Test --output-junit result.xml -j$(nproc) --output-on-failure
  artifacts:
    when: always
    expire_in: 6 months
    reports:
      junit: result.xml

rocky-release:
  image: rockylinux:9
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
  tags:
    - large  # Inria infra
  script:
  - yum install -y dnf-plugins-core # get the 'dnf config-manage' tool
  - dnf config-manager --set-enabled crb # enable the repository for ninja package
  # Still missing on Rocky Linux: nlohmann-json
  - dnf install -y ninja-build cmake g++ gcc-c++ git cmake pybind11-devel python3-devel graphviz-devel eigen3-devel boost-devel java-21-openjdk-devel valgrind-devel diffutils
  - rm -rf CMakeFiles CMakeCache.txt
  - cmake -GNinja -Denable_python=ON -Denable_java=ON -Denable_documentation=OFF -Denable_testsuite_smpi_MPICH3=ON -Denable_testsuite_McMini=ON -Denable_compile_warnings=ON -DLTO_EXTRA_FLAG="auto" .
  - ninja --verbose all tests
  - ctest -T Test --output-junit result.xml -j$(nproc) --output-on-failure
  artifacts:
    when: always
    expire_in: 6 months
    reports:
      junit: result.xml

opensuse-release:
  image: opensuse/tumbleweed # tumbleweed is the rolling release with recent software
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
  tags:
    - large  # Inria infra
  script:
  - zypper install -y ninja cmake gcc-c++ git cmake python313-pybind11-devel python313-numpy-devel graphviz-devel eigen3-devel boost-devel libboost_context-devel java-21-openjdk-devel valgrind-devel diffutils nlohmann_json-devel
  - rm -rf CMakeFiles CMakeCache.txt
  - cmake -GNinja -Denable_python=ON -Denable_java=ON -Denable_documentation=OFF -Denable_testsuite_smpi_MPICH3=ON -Denable_testsuite_McMini=ON -Denable_compile_warnings=ON -DLTO_EXTRA_FLAG="auto" .
  - ninja --verbose all tests
  - ctest -T Test --output-junit result.xml -j$(nproc) --output-on-failure
  artifacts:
    when: always
    expire_in: 6 months
    reports:
      junit: result.xml

docker-intelCC:
  image: docker:latest
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
  tags:
    - small  # Inria infra
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull -t $CI_REGISTRY_IMAGE/intelCC:latest || true
    - docker build -f tools/docker/Dockerfile.intelCC -t $CI_REGISTRY_IMAGE/intelCC:latest .
    - docker push $CI_REGISTRY_IMAGE/intelCC:latest

opensuse-intelCC:
  needs: [docker-intelCC]
  image: $CI_REGISTRY_IMAGE/intelCC:latest
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
  tags:
    - large  # Inria infra
  script:
  - zypper addrepo https://yum.repos.intel.com/oneapi oneAPI
  - zypper --no-gpg-checks install -y ninja cmake intel-oneapi-compiler-dpcpp-cpp intel-oneapi-compiler-fortran gawk git cmake python313-pybind11-devel python313-numpy-devel graphviz-devel eigen3-devel boost-devel libboost_context-devel java-21-openjdk-devel valgrind-devel diffutils nlohmann_json-devel
  - rm -rf CMakeFiles CMakeCache.txt
  - source /opt/intel/oneapi/setvars.sh; cmake -GNinja -DCMAKE_CXX_COMPILER=icpx -DCMAKE_C_COMPILER=icx -Denable_python=ON -Denable_java=ON -Denable_documentation=OFF -Denable_testsuite_smpi_MPICH3=ON -Denable_testsuite_McMini=ON -Denable_compile_warnings=ON -DLTO_EXTRA_FLAG="auto" .
  - ninja --verbose all tests
  - ctest -T Test --output-junit result.xml -j$(nproc) --output-on-failure
  artifacts:
    when: always
    expire_in: 6 months
    reports:
      junit: result.xml

arch-release:
  image: archlinux:latest
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
  tags:
    - large  # Inria infra
  script:
  - pacman --noconfirm -Sy ninja cmake gcc git cmake python-build graphviz eigen boost jdk21-openjdk valgrind pybind11 python-numpy nlohmann-json diffutils
  - rm -rf CMakeFiles CMakeCache.txt
  - cmake -GNinja -Denable_python=ON -Denable_java=ON -Denable_documentation=OFF -Denable_testsuite_smpi_MPICH3=ON -Denable_testsuite_McMini=ON -Denable_compile_warnings=ON -DLTO_EXTRA_FLAG="auto" .
  - ninja --verbose all tests
  - ctest -T Test --output-junit result.xml -j$(nproc) --output-on-failure
  artifacts:
    when: always
    expire_in: 6 months
    reports:
      junit: result.xml


# ###################################################################################################
# ###################################################################################################
# ###################################################################################################

flags:
  extends: .cached-build
  image: $CI_REGISTRY_IMAGE/build-deps:latest
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  tags:
    - large  # Inria infra
  parallel:
    matrix:
      - MC: ["MC", "NO_MC"]
        SMPI: ["SMPI", "NO_SMPI"]
        DEBUG: ["DEBUG", "NO_DEBUG"]
  script:
  - export CXXFLAGS=-D_GLIBCXX_DEBUG
  # We cannot put ON/OFF as values directly, or the job name is not instructive
  - if [ ${MC} == "MC" ]       ; then BUILD_MC="ON"    ; else BUILD_MC="OFF"    ; fi
  - if [ ${SMPI} == "SMPI" ]   ; then BUILD_SMPI="ON"  ; else BUILD_SMPI="OFF"  ; fi
  - if [ ${DEBUG} == "DEBUG" ] ; then BUILD_DEBUG="ON" ; else BUILD_DEBUG="OFF" ; fi
  - cmake -GNinja -Denable_python=ON -Denable_java=ON -Denable_documentation=OFF -Denable_SMPI=${BUILD_SMPI} -Denable_testsuite_smpi_MPICH3=${BUILD_SMPI} -Denable_model-checking=${BUILD_MC} -Denable_testsuite_McMini=${BUILD_MC} -Denable_debug=${BUILD_DEBUG} -Denable_compile_warnings=ON -DLTO_EXTRA_FLAG="auto" .
  - ninja --verbose all tests
  # Run the test in one config with GLIBCXX_DEBUG
  - if [ "${BUILD_MC}/${BUILD_SMPI}/${BUILD_DEBUG}" = "ON/ON/ON" ]; then
     ctest -T Test --output-junit result.xml -j$(nproc) --output-on-failure ;
    fi
